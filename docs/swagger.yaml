basePath: /api
definitions:
  auth.LoginBody:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  auth.MessageResponse:
    properties:
      message:
        type: string
    type: object
  auth.RefreshBody:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterBody:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      tenant_area_id:
        type: integer
      tenant_id:
        type: integer
      username:
        maxLength: 32
        type: string
    required:
    - email
    - password
    - tenant_id
    type: object
  auth.Tenant:
    properties:
      domains:
        items:
          type: string
        type: array
      id:
        type: integer
      name:
        type: string
      tenantAreas:
        items:
          $ref: '#/definitions/auth.TenantArea'
        type: array
    type: object
  auth.TenantArea:
    properties:
      id:
        type: integer
      name:
        type: string
      tenant_id:
        type: integer
    type: object
  auth.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  category.CreateModel:
    properties:
      description:
        maxLength: 256
        type: string
      name:
        maxLength: 32
        type: string
    required:
    - name
    type: object
  category.DeleteModel:
    properties:
      to:
        minimum: 1
        type: integer
    required:
    - to
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      updated_at:
        type: string
    type: object
  models.MessageModel:
    properties:
      product:
        type: string
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      closed:
        type: boolean
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          type: string
        type: array
      name:
        type: string
      price:
        description: Price in cent, $2.70 = 270
        type: integer
      tenant_id:
        description: 由于目前租户较少，暂不添加索引
        type: integer
      type:
        $ref: '#/definitions/models.ProductType'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ProductRecord:
    properties:
      created_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ProductType:
    enum:
    - -1
    - 1
    type: integer
    x-enum-comments:
      ProductTypeAsk: sell
      ProductTypeBid: buy
    x-enum-varnames:
    - ProductTypeBid
    - ProductTypeAsk
  product.CreateModel:
    properties:
      description:
        maxLength: 256
        type: string
      images:
        items:
          type: string
        type: array
      name:
        maxLength: 32
        type: string
      price:
        description: Price in cent, $2.70 = 270
        minimum: 0
        type: integer
      tenant_id:
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/models.ProductType'
        enum:
        - -1
        - 1
    required:
    - name
    - price
    - tenant_id
    - type
    type: object
  product.ModifyModel:
    properties:
      category_id:
        type: integer
      closed:
        type: boolean
      description:
        maxLength: 256
        type: string
      images:
        items:
          type: string
        type: array
      name:
        maxLength: 32
        type: string
      price:
        minimum: 0
        type: integer
      tenant_id:
        type: integer
      type:
        $ref: '#/definitions/models.ProductType'
    type: object
info:
  contact:
    email: jsclndnz@gmail.com
    name: Maintainer Shi Yue
  description: This is a campus flea market system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Ke yi
  version: 0.1.0
paths:
  /:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageModel'
  /categories:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: List Categories
      tags:
      - Category
    post:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/category.CreateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Add A Category
      tags:
      - Category
  /categories/{category_id}/products:
    get:
      parameters:
      - default: 0
        description: offset of object array
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: id
        description: SQL ORDER BY field
        in: query
        name: orderBy
        type: string
      - default: 10
        description: length of object array
        in: query
        maximum: 30
        minimum: 0
        name: size
        type: integer
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      - description: category_id
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List Products of a User
      tags:
      - Product
    post:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/product.CreateModel'
      - description: category_id
        in: path
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - ApiKeyAuth: []
      summary: Add a product
      tags:
      - Product
  /categories/{id}:
    delete:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/category.DeleteModel'
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a category
      tags:
      - Category
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Get a category
      tags:
      - Category
    put:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/category.CreateModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Modify A Category
      tags:
      - Category
  /login:
    post:
      description: use wx code to get access token
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/auth.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
      summary: Login
      tags:
      - Auth
  /products/{id}:
    delete:
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      summary: Set a product as closed.
      tags:
      - Product
    get:
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
      summary: Get a product
      tags:
      - Product
    put:
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/product.ModifyModel'
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
      security:
      - ApiKeyAuth: []
      summary: Modify a product
      tags:
      - Product
  /records/products:
    delete:
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      summary: Delete all product view records
      tags:
      - Record
    get:
      parameters:
      - default: 0
        description: offset of object array
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: id
        description: SQL ORDER BY field
        in: query
        name: orderBy
        type: string
      - default: 10
        description: length of object array
        in: query
        maximum: 30
        minimum: 0
        name: size
        type: integer
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List View Records of a User
      tags:
      - Record
  /records/products/{id}:
    delete:
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      summary: Delete a product view record
      tags:
      - Record
    post:
      description: Frontend should call this api each time user enters the detail
        page of a product.
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProductRecord'
      security:
      - ApiKeyAuth: []
      summary: Add a product to view record
      tags:
      - Record
  /refresh:
    post:
      description: use refresh token to refresh tokens
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
      summary: Refresh Token
      tags:
      - Auth
  /register:
    post:
      description: Fill in user's information to complete registration
      parameters:
      - description: json
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.MessageResponse'
      summary: Register
      tags:
      - Auth
  /tenants:
    get:
      description: List all tenants with areas each
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/auth.Tenant'
            type: array
      summary: List Tenants
      tags:
      - Tenant
  /users/{id}/activate:
    get:
      description: clicks the link in the email to activate the user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
      summary: Activate
      tags:
      - Auth
  /validate:
    post:
      description: send validation email to user
      parameters:
      - in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.MessageResponse'
      summary: Validate By Email
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
